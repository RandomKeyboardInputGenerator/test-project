.alert.alert-info(*ngIf='appSettings.isDataNotLoaded()')
	.alert-box
		.loader
	.alert-box
		| {{ appSettings.getLoaderText() }}
                
.layout(*ngIf='appSettings.isDataLoaded()')
	.top
		.top-nav-row.clear
			button.back-button
				span.left-pointing-angle
			.q-title {{ dictionary.questionsTitle }}
			button.add-button
				span.plus-sign
			.q-radio
				form(#f='ngForm')
					input#myself.q-radio-input(type='radio', value='me', name='questions', [(ngModel)]='radioFilter')
					label(for='myself') {{ dictionary.radioMyself }}
					input#allquestions.q-radio-input(type='radio', value='all', name='questions', [(ngModel)]='radioFilter')
					label(for='allquestions') {{ dictionary.radioAll }}
			.q-sort
				| {{ dictionary.sortingDescription[0] }}
				span([class.q-sort-link]='sortOrder !== \'recent\'', [class.q-sort-link-active]='sortOrder === \'recent\'', (click)='changeQuestionsSortOrder($event)') {{ dictionary.sortByRecent }}
				| {{ dictionary.sortingDescription[1] }}
				span([class.q-sort-link]='sortOrder !== \'hot\'', [class.q-sort-link-active]='sortOrder === \'hot\'', (click)='changeQuestionsSortOrder($event)') {{ dictionary.sortByHot }}
		.top-search-row.clear
			input.q-search(type='text', name='search', title='search', placeholder='Search questions', [(ngModel)]='searchQueryBuffor')
			button.q-search-btn((click)='searchQuestions()') {{ dictionary.searchButton }}
                        
	.body((window:resize)='onResize($event)')
		.question(*ngFor='let question of questions | slice:0:visableQuestions | limitQuestionsByAuthor:radioFilter:userId | search:searchQuery; index as _i;')
			.question-row-title
				.question-avatar((click)='openModal(question.authorId)')
					img.img-circle(src='{{ getAvatar(question.authorId) }}', alt='...')
				.question-author
					p
						span.question-author-name((click)='openModal(question.authorId)') {{ getUserName(question.authorId) }}
						span.description {{ dictionary.questionAuthorDescription[1] }}
					p.title-link([routerLink]="['/question/', question.id]", routerLinkactive='active')
						span {{ question.title }}
			.question-tabs.clear
				.question-asked
					.question-asked-content
						.com-avatar
						.question-com-footer
							hr.grey
							span {{ dictionary.questionAuthorDescription[0] }}
				.question-count(*ngIf='question.comments.length - this.visableComments > 0')
					.question-count-content
						.count-desc
							span {{question.comments.length - this.visableComments}}
						.question-count-footer
							span {{ dictionary.countCommentsDescription }}
						.count-dot-empty
				.question-com(*ngFor='let questionComment of question.comments | slice:0:visableComments; index as _j;', [class.col-1]='_j === 0', [class.col-2]='_j === 1', [class.col-3]='_j === 2', [class.col-4]='_j === 3')
					.question-com-content
						.com-avatar((click)='openModal(getComment(questionComment).authorId)')
							img.img-circle(src='{{ getAvatar(getComment(questionComment).authorId) }}', alt='...')
						.question-com-footer
							hr([class.black]='getComment(questionComment).type === \'ANSWERED\'', [class.grey]='getComment(questionComment).type !== \'ANSWERED\'')
							span {{ getComment(questionComment).type }}
						div([class.question-dot]='getComment(questionComment).type === \'ANSWERED\'', [class.question-dot-empty]='getComment(questionComment).type !== \'ANSWERED\'')
				.question-info
					p.question-info-top
						span.number {{ question.relatedDiscussion }}
						|  {{ dictionary.relatedDiscussion }}
					p.question-info-mid
						span.number {{ question.peersInvolved }}
						|  {{ dictionary.peersInvolved }}
					p.question-info-bottom
						span.number {{ question.conversations }}
						|  {{ dictionary.conversations }}
		.question-load-more
			button.button-link((click)='showMoreQuestions()') {{ dictionary.loadMoreButton }}